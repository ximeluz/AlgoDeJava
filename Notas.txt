¿Qué es una Clase?

* Podemos decir que una clase es un molde, donde se define la estructura (ATRIBUTOS) 
y comportamientos (MÉTODOS) que tendran los objetos.

* Cada objeto que se crea se dice que es una instancia de la clase.
* Cada objeto tiene su identidad y su estado (valor actual de sus atributos)

EJEMPLO: clase Perro

		ATRIBUTOS:
					*Nombre
					*Raza
					*Edad
					*Peso

		COMPORTAMIENTO:
					*Correr
					*Ladrar
					*Jugar
					*Comer

¿Qué es una Herencia?

* Cuando una clase B extiende a una clase A. La clase B va a recibir TODOS los atributos y métodos no privados de A.
* Los métodos heredaros se pueden sobre-escribir, i.e. modificar de acuerdo a la nueva clase A.
* Una clase unicamente puede extender de una clase a la vez.

Metodo compareTo:

*Devuelve 0 si ambas cadenas son iguales.
*Devuelve un valor menor que cero si la cadena es menor que la otra cadena (menos caracteres)
*Devuelve valor mayor que 0 si la cadena es mayor que la otra cadena (más caracteres).

Complejidad (Big-O): (REFERENCIA: https://guias.makeitreal.camp/algoritmos/complejidad)
La complejidad de un algoritmo nos permite entender cómo se va a comportar el algoritmo cuando incrementemos la cantidad de datos de entrada. Ejem: en un algoritmo que ordena una lista, la complejidad nos va a permitir saber cómo se va a comportar ese algoritmo cuando tenga 100,000 o 1 millón de elementos.

La complejidad del algoritmo es independiente de la velocidad del computador en el que se ejecuta y se define utilizando la notación Big-O. La idea es conocer cuántas operaciones se necesitan a medida que aumentan los datos de entrada.

Complejidad lineal - O(n):

A medida que aumentan los datos el número de operaciones aumenta de forma proporcional. Por ejemplo, si necesitamos 1 operaciones por cada dato, vamos a necesitar 10 operaciones para 10 datos y 100 operaciones para 100 datos.

Complejidad exponencial - O(n^2), O(n^3), etc.:

A medida que aumenta la cantidad de datos, el número de operaciones crece de forma exponencial. Por ejemplo, una complejidad cuadrática (O(n^2)) si para un dato necesitamos 2 operaciones, para 2 datos vamos a necesitar 4 operaciones, etc.

Complejidad logaritmica O(log n):

Se da en casos en los que no es necesario recorrer todos los elementos.

Complejidad constante - O(1):

A medida que aumenta la cantidad de datos el número de operaciones se mantiene constante.

Complejidad espacial:
La complejidad espacial es la cantidad de memoria que requiere el algoritmo. Algunas veces es posible reducir la complejidad temporal incrementando la complejidad espacial y viceversa.